name: UMC Dev CI/CD # 여러분들 맘대로 이름 지으세요

on:
  pull_request:
    types: [closed]
    # PR이 closed 되었을 때, 즉 Merge 되었을 때 작동
  workflow_dispatch:
  # (2).수동 실행도 가능하도록

jobs:
  build:
    runs-on: ubuntu-latest
    # (3).OS환경
    #if: github.event.pull_request.merged == true && github.event.pull_request.base.ref == 'develop'
    if: github.event.pull_request.merged == true && github.event.pull_request.base.ref == 'main'
    # merged 된 대상이 'main' 브랜치라는 의미

    steps:
      # 단순히 step의 name을 짓는 것, 알아볼 수 있는 이름으로 짓기
      # (4).코드 check out
      # Checkout : 코드를 가져오는 것
      - name: Checkout
        uses: actions/checkout@v2
        # Github Action의 actions/checkout@v2를 사용하겠다는 의미

      # JDK 설치
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        # actions에서 제공하는 setup-java@v3를 사용
        with:
          # (5).자바 설치
          java-version: 17
          # 자바 버전 설치
          distribution: 'adopt'
          # 어떤 Java 툴을 사용할 것인지 정하는 것

      # (6).권한 부여
      # 빌드된 대상이 돌아가기 위해 권한을 주는 명령어
      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew
        shell: bash

      # (7).build시작
      - name: Build with Gradle
        run: ./gradlew clean build -x test
        shell: bash

      # (8).build시점의 시간확보
      - name: Get current time
        uses: 1466587594/get-current-time@v2
        id: current-time
        with:
          format: YYYY-MM-DDTHH-mm-ss
          utcOffset: "+09:00"

      # (9).확보한 시간 보여주기
      # 시간 정보를 가져오는 것
      - name: Show Current Time
        run: echo "CurrentTime=$"
        shell: bash

      # 제대로 빌드하는 과정
      - name: Generate deployment package
        # mkdir -p deploy
        # deploy 디렉터리에 들어가서 올리기 전에 측정하기 위해

        # cp build/libs/*.jar deploy/application.jar
        # 임시적으로 올려둔 파일을 cp를 통해 생성
        # 즉 deploy할 디렉터리에 복사하는 과정
        # build/libs/*.jar는 스프링 부트 돌리면 저절로 생기는 것

        # cp Procfile deploy/Procfile
        # Procfile : 리눅스의 makefile과 같은 것
        # Procfile 파일 생성 필요

        # cp -r .ebextensions-dev deploy/.ebextensions
        # cp -r .ebextensions deploy/.ebextensions
        # ebextensions : elastic beanstalk extensions
        # elastic beanstalk을 올릴 때 도움을 주는 것
        # .ebextensions-dev 파일 생성 필요

        # cp -r .platform deploy/.platform
        # platform(NGINX)과 관련
        # .platform 파일 생성 필요

        # cd deploy && zip -r deploy.zip .
        # 압축하는 과정
        run: |
          mkdir -p deploy
          cp build/libs/*.jar deploy/application.jar
          cp Procfile deploy/Procfile
          cp -r .ebextensions-dev deploy/.ebextensions
          cp -r .platform deploy/.platform
          cd deploy && zip -r deploy.zip .

      - name: Beanstalk Deploy
        uses: einaregilsson/beanstalk-deploy@v20
        with:
          aws_access_key: ${{ secrets.AWS_ACTION_ACCESS_KEY_ID }}
          aws_secret_key: ${{ secrets.AWS_ACTION_SECRET_ACCESS_KEY }}
          application_name: breifing-dev
          environment_name: Breifing-dev-env
          version_label: github-action-${{ steps.current-time.outputs.formattedTime }}
          region: ap-northeast-1
          deployment_package: deploy/deploy.zip
          wait_for_deployment: false


